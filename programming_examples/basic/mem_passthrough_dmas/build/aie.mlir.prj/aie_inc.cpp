
// This file was auto-generated by aiecc.py --aie-generate-xaie.

#ifndef MLIR_AIE_QUIET
#define __mlir_aie_verbose(x) x
#else
#define __mlir_aie_verbose(x)
#endif

// The following is a wrapper for the common "if(call() != 0) return 1" pattern.
// Use this only in functions that return int. If the call this wrapper is used
// on does not succeed, the expanded code will exit out of the function
// containing this macro with an error code.
#define __mlir_aie_try(x) do { \
  AieRC ret = (x); \
  if(ret != XAIE_OK) { \
    return x; \
  } \
} while(0)

static XAie_DmaDimDesc *__mlir_aie_alloc_dim_desc(size_t ndims) {
  XAie_DmaDimDesc *ret = NULL;
  ret = (XAie_DmaDimDesc *)calloc(sizeof(XAie_DmaDimDesc), ndims);
  if(NULL == ret) {
    __mlir_aie_verbose(fprintf(stderr, "Allocating DmaDimDesc failed.\n"));
  }
  return ret;
}

aie_libxaie_ctx_t* mlir_aie_init_libxaie() {
  aie_libxaie_ctx_t *ctx = new aie_libxaie_ctx_t;
  if (!ctx)
    return 0;
  ctx->AieConfigPtr.AieGen = XAIE_DEV_GEN_AIEML;
  ctx->AieConfigPtr.BaseAddr = 0x20000000000;
  ctx->AieConfigPtr.ColShift = 25;
  ctx->AieConfigPtr.RowShift = 20;
  ctx->AieConfigPtr.NumRows = 6;
  ctx->AieConfigPtr.NumCols = 1;
  ctx->AieConfigPtr.ShimRowNum = 0;
  ctx->AieConfigPtr.MemTileRowStart = 1;
  ctx->AieConfigPtr.MemTileNumRows = 1;
  //  ctx->AieConfigPtr.ReservedRowStart = XAIE_RES_TILE_ROW_START;
  //  ctx->AieConfigPtr.ReservedNumRows  = XAIE_RES_TILE_NUM_ROWS;
  ctx->AieConfigPtr.AieTileRowStart = 2;
  ctx->AieConfigPtr.AieTileNumRows = 4;
  ctx->AieConfigPtr.PartProp = {0};
  ctx->DevInst = {0};
  return ctx;
}

int mlir_aie_configure_cores(aie_libxaie_ctx_t* ctx) {
return XAIE_OK;
} // mlir_aie_configure_cores

int mlir_aie_start_cores(aie_libxaie_ctx_t* ctx) {
return XAIE_OK;
} // mlir_aie_start_cores

int mlir_aie_configure_dmas(aie_libxaie_ctx_t* ctx) {
return XAIE_OK;
} // mlir_aie_configure_dmas

int mlir_aie_initialize_locks(aie_libxaie_ctx_t* ctx) {
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(0,0), XAie_LockInit(2, 0)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(0,0), XAie_LockInit(3, 0)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(0,1), XAie_LockInit(0, 1)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(0,1), XAie_LockInit(1, 0)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(0,0), XAie_LockInit(0, 0)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(0,0), XAie_LockInit(1, 0)));
return XAIE_OK;
} // mlir_aie_initialize_locks
int mlir_aie_configure_switchboxes(aie_libxaie_ctx_t* ctx) {
  int x, y;
// Core Stream Switch column 0 row 0
x = 0;
y = 0;
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), SOUTH, 3, NORTH, 0));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), NORTH, 0, SOUTH, 2));
// Core Stream Switch column 0 row 1
x = 0;
y = 1;
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), SOUTH, 0, DMA, 0));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), DMA, 0, SOUTH, 0));
// ShimMux column 0 row 0
// NOTE ShimMux always connects from the south as directions are defined relative to the tile stream switch
x = 0;
y = 0;
__mlir_aie_try(XAie_EnableShimDmaToAieStrmPort(&(ctx->DevInst), XAie_TileLoc(x,y), 3));
__mlir_aie_try(XAie_EnableAieToShimDmaStrmPort(&(ctx->DevInst), XAie_TileLoc(x,y), 2));
return XAIE_OK;
} // mlir_aie_configure_switchboxes

int mlir_aie_configure_cascade(aie_libxaie_ctx_t* ctx) {
return XAIE_OK;
} // mlir_aie_configure_cascade

const int in_cons_buff_0_offset = 16384;
int32_t mlir_aie_read_buffer_in_cons_buff_0(aie_libxaie_ctx_t* ctx, int index) {
u32 value; auto rc = XAie_DataMemRdWord(&(ctx->DevInst), XAie_TileLoc(0,1), in_cons_buff_0_offset + (index*4), &value);
  return value;
}
int mlir_aie_write_buffer_in_cons_buff_0(aie_libxaie_ctx_t* ctx, int index, int32_t value) {
  int32_t int_value = value;
AieRC rc =    XAie_DataMemWrWord(&(ctx->DevInst), XAie_TileLoc(0,1), in_cons_buff_0_offset + (index*4), int_value);
return rc;
}
int mlir_aie_acquire_out_cons_prod_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 2;
  return XAie_LockAcquire(&(ctx->DevInst), XAie_TileLoc(0,0), XAie_LockInit(id,value), timeout);
}
int mlir_aie_release_out_cons_prod_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 2;
  return XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(0,0), XAie_LockInit(id,value), timeout);
}
int mlir_aie_acquire_out_cons_cons_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 3;
  return XAie_LockAcquire(&(ctx->DevInst), XAie_TileLoc(0,0), XAie_LockInit(id,value), timeout);
}
int mlir_aie_release_out_cons_cons_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 3;
  return XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(0,0), XAie_LockInit(id,value), timeout);
}
int mlir_aie_acquire_in_cons_prod_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 0;
  return XAie_LockAcquire(&(ctx->DevInst), XAie_TileLoc(0,1), XAie_LockInit(id,value), timeout);
}
int mlir_aie_release_in_cons_prod_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 0;
  return XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(0,1), XAie_LockInit(id,value), timeout);
}
int mlir_aie_acquire_in_cons_cons_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 1;
  return XAie_LockAcquire(&(ctx->DevInst), XAie_TileLoc(0,1), XAie_LockInit(id,value), timeout);
}
int mlir_aie_release_in_cons_cons_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 1;
  return XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(0,1), XAie_LockInit(id,value), timeout);
}
int mlir_aie_acquire_in_prod_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 0;
  return XAie_LockAcquire(&(ctx->DevInst), XAie_TileLoc(0,0), XAie_LockInit(id,value), timeout);
}
int mlir_aie_release_in_prod_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 0;
  return XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(0,0), XAie_LockInit(id,value), timeout);
}
int mlir_aie_acquire_in_cons_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 1;
  return XAie_LockAcquire(&(ctx->DevInst), XAie_TileLoc(0,0), XAie_LockInit(id,value), timeout);
}
int mlir_aie_release_in_cons_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 1;
  return XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(0,0), XAie_LockInit(id,value), timeout);
}
